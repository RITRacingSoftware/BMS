/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.1.0 Fri Feb 26 02:01:38 2021.
 */

#ifndef F29BMS_DBC_H
#define F29BMS_DBC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define F29BMS_DBC_BMS_STATUS_FRAME_ID (0x258u)
#define F29BMS_DBC_BMS_FAULT_VECTOR_FRAME_ID (0x2bcu)
#define F29BMS_DBC_BMS_FAULT_ALERT_FRAME_ID (0x2bdu)
#define F29BMS_DBC_BMS_VOLTAGES_FRAME_ID (0x2beu)
#define F29BMS_DBC_BMS_THERMISTOR_VOLTAGES_FRAME_ID (0x2bfu)
#define F29BMS_DBC_BMS_TEMPERATURES_FRAME_ID (0x2c0u)
#define F29BMS_DBC_BMS_DRAIN_STATUS_A_FRAME_ID (0x320u)
#define F29BMS_DBC_BMS_DRAIN_STATUS_B_FRAME_ID (0x321u)
#define F29BMS_DBC_BMS_CURRENT_FRAME_ID (0x384u)
#define F29BMS_DBC_BMS_CHARGE_REQUEST_FRAME_ID (0x1806e5f4u)

/* Frame lengths in bytes. */
#define F29BMS_DBC_BMS_STATUS_LENGTH (8u)
#define F29BMS_DBC_BMS_FAULT_VECTOR_LENGTH (8u)
#define F29BMS_DBC_BMS_FAULT_ALERT_LENGTH (8u)
#define F29BMS_DBC_BMS_VOLTAGES_LENGTH (8u)
#define F29BMS_DBC_BMS_THERMISTOR_VOLTAGES_LENGTH (8u)
#define F29BMS_DBC_BMS_TEMPERATURES_LENGTH (8u)
#define F29BMS_DBC_BMS_DRAIN_STATUS_A_LENGTH (8u)
#define F29BMS_DBC_BMS_DRAIN_STATUS_B_LENGTH (8u)
#define F29BMS_DBC_BMS_CURRENT_LENGTH (8u)
#define F29BMS_DBC_BMS_CHARGE_REQUEST_LENGTH (8u)

/* Extended or standard frame types. */
#define F29BMS_DBC_BMS_STATUS_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_FAULT_VECTOR_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_FAULT_ALERT_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_VOLTAGES_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_THERMISTOR_VOLTAGES_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_TEMPERATURES_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_DRAIN_STATUS_A_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_DRAIN_STATUS_B_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_CURRENT_IS_EXTENDED (0)
#define F29BMS_DBC_BMS_CHARGE_REQUEST_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define F29BMS_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_DISCONNECTED_CHOICE (0u)
#define F29BMS_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_CHOICE (1u)
#define F29BMS_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_BALANCING_CHOICE (2u)
#define F29BMS_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_CHARGING_CHOICE (3u)

#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_CELLS_CHOICE (0u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_TEMPS_CHOICE (1u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_DRAIN_REQUEST_CHOICE (2u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CURRENT_SENSOR_COMM_CHOICE (3u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_OVER_CURRENT_CHOICE (4u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CELL_VOLTAGE_IRRATIONAL_CHOICE (5u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CELL_VOLTAGE_DIFF_CHOICE (6u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULTCODE_OUT_OF_JUICE_CHOICE (7u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_TEMPERATURE_IRRATIONAL_CHOICE (8u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_OVER_TEMP_CHOICE (9u)
#define F29BMS_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_DRAIN_FAILURE_CHOICE (10u)

/**
 * Signals in message BmsStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_status_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_soc;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_soc_raw;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_charge_state;
};

/**
 * Signals in message BmsFaultVector.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_fault_vector_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_cells;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_temps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_drain_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_current_sensor_comm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_over_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_cell_voltage_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_cell_voltage_diff;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_out_of_juice;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_temperature_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_over_temperature;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_drain_failure;
};

/**
 * Signals in message BmsFaultAlert.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_fault_alert_t {
    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_cell_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_temp_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_drain_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_adc_error_code;

    /**
     * Range: 0..2000000 (0..2000 A)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bms_fault_alert_current;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_irrational_voltage;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_voltage_diff;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_lowest_cell_voltage;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_irrational_temperature;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_over_temperature;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_failed_drain_cell;
};

/**
 * Signals in message BmsVoltages.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_voltages_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_voltages_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell0;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell24;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell30;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell36;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell42;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell48;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell54;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell60;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell66;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell72;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell78;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell84;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell25;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell31;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell37;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell43;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell49;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell55;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell61;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell67;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell73;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell79;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell85;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell20;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell26;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell32;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell38;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell44;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell50;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell56;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell62;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell68;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell74;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell80;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell86;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell21;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell27;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell33;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell39;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell45;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell51;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell57;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell63;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell69;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell75;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell81;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell87;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell22;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell28;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell34;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell40;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell46;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell52;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell58;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell64;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell70;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell76;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell82;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell88;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell23;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell29;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell35;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell41;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell47;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell53;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell59;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell65;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell71;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell77;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell83;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell89;
};

/**
 * Signals in message BmsThermistorVoltages.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_thermistor_voltages_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_thermistor_voltages_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm0;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm17;
};

/**
 * Signals in message BmsTemperatures.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_temperatures_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temperatures_mux;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_0;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_14;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_15;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_9;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_16;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_10;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_17;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_11;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_18;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_12;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_19;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_13;
};

/**
 * Signals in message BmsDrainStatusA.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_drain_status_a_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t bms_drain_status_cells0to63;
};

/**
 * Signals in message BmsDrainStatusB.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_drain_status_b_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_drain_status_cells64to89;
};

/**
 * Signals in message BmsCurrent.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_current_t {
    /**
     * Range: 0..2000000 (0..2000 A)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bms_inst_current_filt;
};

/**
 * Signals in message BmsChargeRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct f29bms_dbc_bms_charge_request_t {
    /**
     * Range: 0..65533 (0..6553.3 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_charge_request_max_voltage;

    /**
     * Range: 0..65533 (0..6553.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_charge_request_max_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_request_control;
};

/**
 * Pack message BmsStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_status_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_status_t *src_p,
    size_t size);

/**
 * Unpack message BmsStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_status_unpack(
    struct f29bms_dbc_bms_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_status_bms_status_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_status_bms_status_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_status_bms_status_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_status_bms_status_soc_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_status_bms_status_soc_raw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_status_bms_status_soc_raw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_status_bms_status_charge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_status_bms_status_charge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_status_bms_status_charge_state_is_in_range(uint8_t value);

/**
 * Pack message BmsFaultVector.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_fault_vector_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_fault_vector_t *src_p,
    size_t size);

/**
 * Unpack message BmsFaultVector.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_fault_vector_unpack(
    struct f29bms_dbc_bms_fault_vector_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_over_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_over_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_vector_bms_fault_vector_drain_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_vector_bms_fault_vector_drain_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_vector_bms_fault_vector_drain_failure_is_in_range(uint8_t value);

/**
 * Pack message BmsFaultAlert.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_fault_alert_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_fault_alert_t *src_p,
    size_t size);

/**
 * Unpack message BmsFaultAlert.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_fault_alert_unpack(
    struct f29bms_dbc_bms_fault_alert_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_alert_bms_fault_alert_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t f29bms_dbc_bms_fault_alert_bms_fault_alert_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_current_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_current_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_fault_alert_bms_fault_alert_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_over_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_over_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_is_in_range(uint8_t value);

/**
 * Pack message BmsVoltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_voltages_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BmsVoltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_voltages_unpack(
    struct f29bms_dbc_bms_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_voltages_bms_voltages_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell24_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell36_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell48_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell60_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell72_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell84_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell20_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell32_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell44_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell56_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell68_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell80_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell28_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell40_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell52_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell64_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell76_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell88_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_voltages_bms_voltages_cell89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_voltages_bms_voltages_cell89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_voltages_bms_voltages_cell89_is_in_range(uint16_t value);

/**
 * Pack message BmsThermistorVoltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_thermistor_voltages_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_thermistor_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BmsThermistorVoltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_thermistor_voltages_unpack(
    struct f29bms_dbc_bms_thermistor_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm17_is_in_range(uint16_t value);

/**
 * Pack message BmsTemperatures.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_temperatures_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_temperatures_t *src_p,
    size_t size);

/**
 * Unpack message BmsTemperatures.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_temperatures_unpack(
    struct f29bms_dbc_bms_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_temperatures_bms_temperatures_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_15_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t f29bms_dbc_bms_temperatures_bms_temperatures_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_temperatures_bms_temperatures_13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_temperatures_bms_temperatures_13_is_in_range(int8_t value);

/**
 * Pack message BmsDrainStatusA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_drain_status_a_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_drain_status_a_t *src_p,
    size_t size);

/**
 * Unpack message BmsDrainStatusA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_drain_status_a_unpack(
    struct f29bms_dbc_bms_drain_status_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t f29bms_dbc_bms_drain_status_a_bms_drain_status_cells0to63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_drain_status_a_bms_drain_status_cells0to63_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_drain_status_a_bms_drain_status_cells0to63_is_in_range(uint64_t value);

/**
 * Pack message BmsDrainStatusB.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_drain_status_b_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_drain_status_b_t *src_p,
    size_t size);

/**
 * Unpack message BmsDrainStatusB.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_drain_status_b_unpack(
    struct f29bms_dbc_bms_drain_status_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t f29bms_dbc_bms_drain_status_b_bms_drain_status_cells64to89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_drain_status_b_bms_drain_status_cells64to89_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_drain_status_b_bms_drain_status_cells64to89_is_in_range(uint32_t value);

/**
 * Pack message BmsCurrent.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_current_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_current_t *src_p,
    size_t size);

/**
 * Unpack message BmsCurrent.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_current_unpack(
    struct f29bms_dbc_bms_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t f29bms_dbc_bms_current_bms_inst_current_filt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_current_bms_inst_current_filt_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_current_bms_inst_current_filt_is_in_range(uint32_t value);

/**
 * Pack message BmsChargeRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int f29bms_dbc_bms_charge_request_pack(
    uint8_t *dst_p,
    const struct f29bms_dbc_bms_charge_request_t *src_p,
    size_t size);

/**
 * Unpack message BmsChargeRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int f29bms_dbc_bms_charge_request_unpack(
    struct f29bms_dbc_bms_charge_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_charge_request_bms_charge_request_max_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_charge_request_bms_charge_request_max_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_charge_request_bms_charge_request_max_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t f29bms_dbc_bms_charge_request_bms_charge_request_max_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_charge_request_bms_charge_request_max_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_charge_request_bms_charge_request_max_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t f29bms_dbc_bms_charge_request_bms_charge_request_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double f29bms_dbc_bms_charge_request_bms_charge_request_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool f29bms_dbc_bms_charge_request_bms_charge_request_control_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
